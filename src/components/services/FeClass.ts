import { User, NewsArticle, Voucher } from "../models/interfaces";

export default class FeClass {

    constructor() {
        console.log('üç£ Hoshimo FeClass initialized');
    }

    // ‚úÖ Zmƒõna URL z pizzalab na hoshimosushi
    ApiUrl = "https://gastroapp-backend.onrender.com/api/hoshimosushi";

    /**
     * Registrace/login u≈æivatele p≈ôes OAuth (Apple/Google)
     * @param user Objekt u≈æivatele k registraci
     * @returns Registrovan√Ω u≈æivatel nebo error
     */
    async registerUser(user: User) {
        try {
            const response = await fetch(`${this.ApiUrl}/users`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(user)
            });

            // Z√≠sk√°n√≠ a parsov√°n√≠ response v jednom kroku
            const responseText = await response.text();

            if (!response.ok) {
                throw new Error(`Connected to Server, but received status ${response.status}`);
            }

            // Pokus parsovat text jako JSON
            try {
                return JSON.parse(responseText);
            } catch (e) {
                console.error("Nelze parsovat odpovƒõƒè jako JSON:", e);
                throw new Error("Invalid JSON response from server");
            }
        } catch (error) {
            if (error instanceof TypeError) {
                console.error(`Unable to connect server with this status ${error.message}`);
            } else {
                console.error(`Failed to connect server with this error: ${error}`);
            }
            throw error; // Propagujeme chybu d√°l
        }
    }

    /**
     * Z√≠sk√° aktu√°ln√≠ data u≈æivatele z backendu
     * @param userId ID u≈æivatele
     * @returns Aktualizovan√Ω u≈æivatelsk√Ω objekt nebo null v p≈ô√≠padƒõ chyby
     */
    async getUserById(userId: string): Promise<User | null> {
        try {
            const response = await fetch(`${this.ApiUrl}/users/${userId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`Chyba p≈ôi naƒç√≠t√°n√≠ u≈æivatele: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Chyba p≈ôi z√≠sk√°v√°n√≠ u≈æivatele z backendu:', error);
            return null;
        }
    }

    /**
     * Pou≈æije voucher u≈æivatele
     * @param userId ID u≈æivatele
     * @param userVoucherId ID user voucheru k pou≈æit√≠
     * @returns Aktualizovan√Ω u≈æivatel nebo null
     */
    async useVoucher(userId: string, userVoucherId: string): Promise<User | null> {
        try {
            const response = await fetch(`${this.ApiUrl}/users/${userId}/use-voucher/${userVoucherId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `Chyba p≈ôi pou≈æit√≠ voucheru: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Chyba p≈ôi pou≈æit√≠ voucheru:', error);
            return null;
        }
    }

    /**
     * ‚úÖ ZMƒöNA: Aktualizuje loyalty points u≈æivatele (m√≠sto tokens)
     * @param userId ID u≈æivatele
     * @param loyaltyPointsChange Zmƒõna v loyalty points (m≈Ø≈æe b√Ωt z√°porn√°)
     * @returns Aktualizovan√Ω u≈æivatel nebo error objekt
     */
    async updateUserLoyaltyPoints(userId: string, loyaltyPointsChange: number) {
        try {
            // 1. Pokus o komunikaci se serverem
            const response = await fetch(`${this.ApiUrl}/users/${userId}/tokens`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ tokenChange: loyaltyPointsChange }) // ‚úÖ Backend oƒçek√°v√° tokenChange
            });

            // 2. Spojen√≠ probƒõhlo, ale response nen√≠ OK zji≈°≈•ujeme probl√©m
            if (!response.ok) {
                if (response.status >= 400 && response.status < 500) {
                    return {
                        error: "Chyba v po≈æadavku",
                        code: response.status
                    };
                } else {
                    // spojen√≠ probƒõhlo, ale server selhal p≈ôi jeho zpracov√°n√≠(500, 502, 503)
                    return {
                        error: "Chyba serveru",
                        code: response.status
                    };
                }
            }
            // √∫spƒõch 200-299 response
            return await response.json();
        }
            // s√≠≈•ov√© chyby, nespojili jsme se serverem, nedostupnost, cors, chyba dns, syntaktick√° chyba v url
        catch (error) {
            return {
                error: "S√≠≈•ov√° chyba",
                code: 0
            };
        }
    }

    /**
     * Z√≠sk√° novinky z backendu
     * @returns Pole ƒçl√°nk≈Ø nebo error objekt
     */
    async getNews(): Promise<NewsArticle[] | any> {
        try {
            const response = await fetch(`${this.ApiUrl}/news`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                if (response.status >= 400 && response.status < 500) {
                    return {
                        error: "Chyba v po≈æadavku",
                        code: response.status
                    };
                } else {
                    // spojen√≠ probƒõhlo, ale server selhal p≈ôi jeho zpracov√°n√≠(500, 502, 503)
                    return {
                        error: "Chyba serveru",
                        code: response.status
                    };
                }
            }

            const newsArticles: NewsArticle[] = await response.json();
            return newsArticles;
        }
        catch (error) {
            return {
                error: "S√≠≈•ov√° chyba",
                code: 0
            };
        }
    }

    /**
     * Z√≠sk√° menu z backendu
     * @returns Menu items nebo error objekt
     */
    async getMenu() {
        try {
            const response = await fetch(`${this.ApiUrl}/menu`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                if (response.status >= 400 && response.status < 500) {
                    return {
                        error: "Chyba v po≈æadavku",
                        code: response.status
                    };
                } else {
                    return {
                        error: "Po spojen√≠ se serverem -> chyba serveru",
                        code: response.status
                    };
                }
            }

            return await response.json();
        }
        catch (error) {
            return {
                error: "Nespojili jsme se serverem -> s√≠≈•ov√° chyba",
                code: error
            };
        }
    }

    /**
     * ‚úÖ HLAVN√ç FUNKCE: Metoda pro validaci QR k√≥du, ovƒõ≈ôen√≠ polohy a z√≠sk√°n√≠ loyalty points
     * @param userId ID u≈æivatele
     * @param qrCode Naskenovan√Ω QR k√≥d
     * @param latitude Zemƒõpisn√° ≈°√≠≈ôka u≈æivatele
     * @param longitude Zemƒõpisn√° d√©lka u≈æivatele
     * @returns Aktualizovan√Ω objekt u≈æivatele nebo objekt s informac√≠ o chybƒõ
     */
    async validateQRCodeAndGetTokens(userId: string, qrCode: string, latitude: number, longitude: number) {
        try {
            // Vytvo≈ô√≠me data pro odesl√°n√≠ na backend
            const requestData = {
                userId,
                qrCode: qrCode,
                latitude: latitude,
                longitude: longitude
            };

            // Po≈°leme po≈æadavek na backend
            const response = await fetch(`${this.ApiUrl}/validate-qr-and-add-tokens`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            });

            // Zpracov√°n√≠ odpovƒõdi podle HTTP k√≥du
            if (!response.ok) {
                if (response.status >= 400 && response.status < 500) {
                    // Klientsk√° chyba - z√≠sk√°me detailn√≠ zpr√°vu z odpovƒõdi
                    const errorData = await response.json();
                    return {
                        error: errorData.error || "Chyba v po≈æadavku",
                        code: response.status
                    };
                } else {
                    // Serverov√° chyba
                    return {
                        error: "Chyba serveru",
                        code: response.status
                    };
                }
            }

            // √öspƒõ≈°n√° odpovƒõƒè - aktualizovan√° data u≈æivatele
            const updatedUser: User = await response.json();

            // Rovnou vrac√≠me aktualizovan√©ho u≈æivatele, ani≈æ bychom ho ukl√°dali do lok√°ln√≠ho √∫lo≈æi≈°tƒõ
            return updatedUser;
        } catch (error) {
            // S√≠≈•ov√© chyby - nespojili jsme se serverem
            console.error("S√≠≈•ov√° chyba p≈ôi komunikaci se serverem:", error);
            return {
                error: "S√≠≈•ov√° chyba",
                code: 0
            };
        }
    }

    /**
     * Aktualizuje profil u≈æivatele
     * @param userId ID u≈æivatele
     * @param profileData Objekt obsahuj√≠c√≠ data k aktualizaci
     * @returns Aktualizovan√Ω objekt u≈æivatele nebo null v p≈ô√≠padƒõ chyby
     */
    async updateUserProfile(userId: string, profileData: { firstName?: string; name?: string; email?: string }) {
        try {
            const response = await fetch(`${this.ApiUrl}/users/${userId}/profile`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(profileData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `Chyba p≈ôi aktualizaci profilu: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Chyba p≈ôi aktualizaci profilu u≈æivatele:', error);
            throw error;
        }
    }

    /**
     * ‚úÖ NOV√Å FUNKCE: Z√≠sk√° VIP vouchery pro exkluzivn√≠ nab√≠dky
     * @returns Pole VIP voucher≈Ø nebo null v p≈ô√≠padƒõ chyby
     */
    async getVipVouchers(): Promise<Voucher[] | null> {
        try {
            const response = await fetch(`${this.ApiUrl}/vip-vouchers`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`Chyba p≈ôi naƒç√≠t√°n√≠ VIP voucher≈Ø: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Chyba p≈ôi z√≠sk√°v√°n√≠ VIP voucher≈Ø:', error);
            return null;
        }
    }

    /**
     * Sma≈æe u≈æivatelsk√Ω √∫ƒçet
     * @param userId ID u≈æivatele k smaz√°n√≠
     * @returns true pokud √∫spƒõ≈°n√©, jinak vyhod√≠ error
     */
    async deleteUserAccount(userId: string): Promise<boolean> {
        try {
            console.log(`Vol√°m API pro smaz√°n√≠ √∫ƒçtu u≈æivatele: ${userId}`);

            const response = await fetch(`${this.ApiUrl}/users/${userId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            // Parsov√°n√≠ odpovƒõdi
            const data = await response.json();

            if (!response.ok) {
                // Server vr√°til chybu
                console.error('Chyba p≈ôi maz√°n√≠ √∫ƒçtu:', data);
                throw new Error(data.error || `HTTP ${response.status}: Chyba p≈ôi maz√°n√≠ √∫ƒçtu`);
            }

            // √öspƒõ≈°n√° odpovƒõƒè
            console.log('√öƒçet √∫spƒõ≈°nƒõ smaz√°n:', data);
            return data.success === true;

        } catch (error) {
            console.error('Chyba v deleteUserAccount:', error);

            if (error instanceof Error) {
                throw error; // P≈ôed√°me p≈Øvodn√≠ chybu
            } else {
                throw new Error('Neoƒçek√°van√° chyba p≈ôi maz√°n√≠ √∫ƒçtu');
            }
        }
    };

    async getBranches() {
        try {
            const response = await fetch(`${this.ApiUrl}/branches`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
            });

            if (!response.ok) {
                throw new Error(`Chyba p≈ôi naƒç√≠t√°n√≠branches: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('Chyba p≈ôi z√≠sk√°v√°n√≠ branches:', error);
            return null;
        }
    };
}

// ‚úÖ Singleton instance - stejn√Ω n√°zev jako v Pizza Gapa
export const frontendClass = new FeClass();