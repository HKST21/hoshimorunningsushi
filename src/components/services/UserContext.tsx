import React, {createContext, useState, useContext, useEffect, ReactNode} from "react";
import {addUserToStore, loadUserFromStore} from "./AuthStorage";
import {User} from "../models/interfaces";
import {frontendClass} from "./FeClass";
import * as SecureStore from 'expo-secure-store';
import Toast from "react-native-toast-message";

/*JAK TOTO CEL√â FUNGUJE:
* JAK TOTO CEL√â FUNGUJE:

1) Vytvo≈ô√≠m pomoc√≠ createContext objekt, kter√Ω pojmenuju UserContext.
   - Tento objekt slou≈æ√≠ jako IDENTIFIK√ÅTOR konkr√©tn√≠ho kontextu.
   - Z tohoto objektu z√≠sk√°me komponentu UserContext.Provider.
   - Tento identifik√°tor pozdƒõji pou≈æijeme s useContext hookem.

2) Vytvo≈ô√≠m Provider komponentu, kter√°:
   - P≈ôij√≠m√° children v props (vno≈ôen√© komponenty)
   - Udr≈æuje stavov√© promƒõnn√© (loggedUser) a setovac√≠ funkce
   - Synchronizuje tyto promƒõnn√© se SecureStore

3) V Provideru vytvo≈ô√≠m objekt value obsahuj√≠c√≠ data a funkce, kter√© chci sd√≠let.
   Tento objekt pak p≈ôed√°m do <UserContext.Provider value={value}>.
   React internƒõ propoj√≠ tento objekt s identifik√°torem UserContext.

4) Vytvo≈ô√≠m hook useUser, kter√Ω:
   - Vol√° useContext(UserContext) - t√≠m p≈ôed√° Reactu identifik√°tor (ten sam√Ω objekt)
   - React najde nejbli≈æ≈°√≠ Provider s odpov√≠daj√≠c√≠m identifik√°torem
   - React vr√°t√≠ value z tohoto Provideru
   - V√Ωsledek je stejn√Ω objekt, kter√Ω jsme p≈ôedali do value prop v Provideru

5) V komponent√°ch pak pou≈æijeme useUser() hook a z√≠sk√°me data a funkce z objektu
   value (d√≠ky destrukturalizaci m≈Ø≈æeme z√≠skat p≈ô√≠mo loggedUser a setLoggedUser).*/


// Typ pro kontext
type UserContextType = {
    loggedUser: User | null;
    setLoggedUser: (user: User | null) => Promise<boolean>;
};

// VYTVO≈ò√çME KONTEXT
const UserContext = createContext<UserContextType | undefined>(undefined);

// Provider komponenta, kter√° poskytuje kontext cel√© aplikaci
type UserProviderProps = {
    children: ReactNode;
};
// VYTVO≈ò√çME PROVIDER KTER√ù UCHOV√ÅV√Å STAVY A SETOVAC√ç FUNKCE VƒåETNƒö JEJICH NAƒå√çT√ÅN√ç
export const UserProvider = ({children}: UserProviderProps) => {
    const [loggedUser, setLoggedUser] = useState<User | null>(null);

    // Efekt pro naƒçten√≠ u≈æivatele ze secure storu
    useEffect(() => {
        const loadUser = async () => {
            try {
                const userFromSecureStore = await loadUserFromStore();
                if (userFromSecureStore?.id) {
                    console.log(`Naƒçten u≈æivatel ze SecureStore: ${userFromSecureStore.email} (ID: ${userFromSecureStore.id})`);

                    // Doƒçasnƒõ nastav√≠me u≈æivatele (pro UX - nezobraz√≠ se login obrazovka)
                    setLoggedUser(userFromSecureStore);

                    try {
                        // KRITICK√Å VALIDACE: Ovƒõ≈ô√≠me ≈æe u≈æivatel st√°le existuje v datab√°zi
                        console.log('Ovƒõ≈ôuji existenci u≈æivatele v datab√°zi...');
                        const userFromDB = await frontendClass.getUserById(userFromSecureStore.id);

                        if (userFromDB) {
                            // U≈æivatel existuje - aktualizujeme na nejnovƒõj≈°√≠ data z DB
                            console.log('‚úÖ U≈æivatel nalezen v DB, aktualizuji data');
                            await updateLoggedUser(userFromDB);
                        } else {
                            // U≈æivatel neexistuje v DB (byl smaz√°n) - vyƒçist√≠me SecureStore
                            console.log('‚ùå U≈æivatel neexistuje v DB, byl pravdƒõpodobnƒõ smaz√°n');
                            console.log('üßπ Ma≈æu u≈æivatele ze SecureStore a odhla≈°uji');

                            await SecureStore.deleteItemAsync('loggedInUser');
                            setLoggedUser(null);

                            // Volitelnƒõ zobraz√≠me toast
                            Toast?.show?.({
                                type: 'info',
                                text1: '√öƒçet nenalezen',
                                text2: 'V√°≈° √∫ƒçet ji≈æ neexistuje. P≈ôihlaste se pros√≠m znovu.',
                            });
                        }
                    } catch (dbError) {
                        // Chyba p≈ôi komunikaci s DB - taky vyƒçist√≠me SecureStore
                        console.error('‚ùå Chyba p≈ôi ovƒõ≈ôov√°n√≠ u≈æivatele v DB:', dbError);
                        console.log('üßπ Kv≈Øli chybƒõ ma≈æu u≈æivatele ze SecureStore');

                        await SecureStore.deleteItemAsync('loggedInUser');
                        setLoggedUser(null);

                        // Volitelnƒõ zobraz√≠me toast o chybƒõ
                        Toast?.show?.({
                            type: 'error',
                            text1: 'Chyba p≈ôi ovƒõ≈ôov√°n√≠',
                            text2: 'Nepoda≈ôilo se ovƒõ≈ôit v√°≈° √∫ƒçet. P≈ôihlaste se pros√≠m znovu.',
                        });
                    }
                } else {
                    // ≈Ω√°dn√Ω u≈æivatel v SecureStore
                    console.log('üí≠ ≈Ω√°dn√Ω u≈æivatel v SecureStore, zobraz√≠ se p≈ôihla≈°ovac√≠ obrazovka');
                    setLoggedUser(null);
                }
            } catch (secureStoreError) {
                // Chyba p≈ôi naƒç√≠t√°n√≠ ze SecureStore
                console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ ze SecureStore:', secureStoreError);
                setLoggedUser(null);
            }
        };

        loadUser();
    }, []);
    // ZDE VOL√ÅME UKL√ÅD√ÅN√ç DO STORU A NASTAVOV√ÅN√ç STAVU, UPDATUJEME REACT STAV I STORE STAV :)
    const updateLoggedUser = async (user: User | null): Promise<boolean> => {
        try {
            if (user) {
                await addUserToStore(user);
            } else {
                const USER_KEY = 'loggedInUser';
                await SecureStore.deleteItemAsync(USER_KEY);
            }
            setLoggedUser(user);
            return true;
        } catch (e) {
            console.error('Chyba p≈ôi updatov√°n√≠ u≈æivatele', e);
            return false;
        }
    };

    // VYTVO≈ò√çME VALUE, KTEROU P≈òED√ÅME DO JSX, TATO VALUE M√Å V SOBƒö STAVY A SETOVAC√ç FUNKCE Z PROVIDERU
    const value: UserContextType = {
        loggedUser, // U≈æivatelova data
        setLoggedUser: updateLoggedUser // Funkce pro aktualizaci u≈æivatele
    };

    return (
        // P≈òI NAƒåTƒöN√ç ELEMENT≈Æ SE Z√çSK√Å VALUE, kter√° obsahuje aktu√°ln√≠ stav z provideru
        <UserContext.Provider value={value}>
            {children}
        </UserContext.Provider>

    );
};

// HOOK PRO POU≈ΩIT√ç KONTEXTU, VOL√ÅME HO V KOMPONENT√ÅCH ABYCHOM Z√çSKALI DATA I SETOVAC√ç FUNKCI
export const useUser = (): UserContextType => {
    const context = useContext(UserContext);
    if (!context) {
        throw new Error('useUser mus√≠ b√Ωt pou≈æit uvnit≈ô UserProvider');
    }
    return context;
};

/*
* dob≈ôe tak≈æe kdy≈æ vytvo≈ô√≠m createContext tak z√≠sk√°m:
* {komponenta,
contextId}?
* a kdyz volam useContext(contextId) tak react hled√° v provideru komponenta, zisk√° jej√≠ value a vr√°t√≠ j√≠ ? tzn vr√°t√≠ promƒõnn√© a setovac√≠ funkce prostƒõ cokoliv co chciEditP≈ôesnƒõ tak! Velmi dob≈ôe to popisuje≈°.
* Kdy≈æ pou≈æije≈° createContext(), z√≠sk√°≈° objekt, kter√Ω m√° dvƒõ hlavn√≠ ƒç√°sti:

Provider komponenta - dostupn√° jako vlastnost .Provider na vytvo≈ôen√©m objektu kontextu. Pou≈æ√≠v√°≈° ji k poskytov√°n√≠ hodnot.
Identifik√°tor kontextu - samotn√Ω objekt kontextu slou≈æ√≠ jako jedineƒçn√Ω identifik√°tor nebo "kl√≠ƒç", kter√Ω React pou≈æ√≠v√° k nalezen√≠ spr√°vn√Ωch hodnot.

Kdy≈æ potom vol√°≈° useContext(contextId), React prov√°d√≠ tyto kroky:

Pou≈æ√≠v√° poskytnut√Ω identifik√°tor kontextu (contextId) k vyhled√°n√≠ nejbli≈æ≈°√≠ho Provideru tohoto kontextu v hierarchii komponent smƒõrem nahoru.
Jakmile najde odpov√≠daj√≠c√≠ Provider, z√≠sk√° jeho value prop (tedy ty hodnoty, kter√© jsi do nƒõj vlo≈æil).
Vr√°t√≠ tuto hodnotu jako v√Ωsledek vol√°n√≠ useContext().

Proto m≈Ø≈æe≈° v libovoln√© komponentƒõ uvnit≈ô <UserContext.Provider> zavolat useContext(UserContext) a dostane≈° p≈ôesnƒõ ty hodnoty,
* kter√© jsi um√≠stil do value prop toho Provideru.
Praktick√° str√°nka tohoto mechanismu je, ≈æe m≈Ø≈æe≈° sd√≠let jak√Ωkoli stav nebo funkce, kter√© pot≈ôebuje≈° nap≈ô√≠ƒç komponentami,
* ani≈æ bys je musel p≈ôed√°vat p≈ôes props. M≈Ø≈æe to b√Ωt jednoduch√© jako jm√©no u≈æivatele nebo slo≈æit√© jako cel√Ω objekt s funkcemi
*  pro spr√°vu stavu aplikace.*/